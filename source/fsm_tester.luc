module fsm_tester (
    input clk,  // clock
    input rst,  // reset
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    output a,
    output b,
    output cin,
    input cout,
    input s
  ) {
  
  const DIV = 26;           // regulates the speed in which the inputs are generated
  
  .clk(clk) {
    .rst(rst) {
      fsm states = {MANUAL, AUTO, ERROR}; // instance of a finite state machine
      dff ctr[3+DIV];                     // use a flip flop as a counter for different inputs
      dff buffer[DIV];                    // buffer between change in input and error checking
      display seg;                        // instance used to display error message
    }
  }
  
  always {
    io_led = 3x{{8h00}};     // turn LEDs off
    io_seg = ~seg.seg;       // connect segments to the driver
    io_sel = ~seg.sel;       // connect select to the driver
     // increment buffer counter
    
    // initialize variables
    a = 0;
    b = 0;
    cin = 0;
    seg.chars = {4h0, 4h0, 4h0, 4h0};
    
    case (states.q) {
      states.MANUAL:        // manual mode: use the rightmost 3 switches to do inputs
        ctr.d = 1;          // reset the counter
        buffer.d = 1;
        buffer.d = buffer.q + 1;
        
        a = io_dip[0][1];   // DIP switch 1 controls input a
        b = io_dip[0][0];   // DIP switch 0 controls input b
        cin = io_dip[0][2]; // DIP switch 2 controls input carry-in
        
        io_led[0][0] = (io_dip[0][1] ^ io_dip[0][0]) ^ io_dip[0][2];                                   // Correct sum
        io_led[0][1] = ((io_dip[0][1] ^ io_dip[0][0]) & io_dip[0][2]) | (io_dip[0][1] & io_dip[0][0]); // Correct carry-out        
        if (buffer.q == 0)
          if (cout != (((io_dip[0][1] ^ io_dip[0][0]) & io_dip[0][2]) | (io_dip[0][1] & io_dip[0][0])) ||
                 s != ((io_dip[0][1] ^ io_dip[0][0]) ^ io_dip[0][2]))            // if the output from the circuit is wrong
            states.d = states.ERROR;                                             // goes to error state
          
        if (io_button[1])         // when the center button is pressed
          states.d = states.AUTO; // switch to automatic testing
        
      states.AUTO:
        io_led[1][2-:3] = ctr.q[3+DIV-1-:3]; // set the LED output
        ctr.d = ctr.q + 1;                   // increment
        buffer.d = c{0, (DIV-1)x{1}};
        buffer.d = buffer.q + 1;
        
        a = ctr.q[1+DIV];                    // second most significant bit represents input a
        b = ctr.q[DIV];                      // third most significant bit represents input b
        cin = ctr.q[2+DIV];                  // most significant bit represents input carry-in
        
        io_led[2][0] = (ctr.q[1+DIV] ^ ctr.q[DIV]) ^ ctr.q[2+DIV];                                   // Correct sum
        io_led[2][1] = ((ctr.q[1+DIV] ^ ctr.q[DIV]) & ctr.q[2+DIV]) | (ctr.q[1+DIV] & ctr.q[DIV]);   // Correct carry-out
        if (buffer.q == 0)
          if (cout != (((ctr.q[1+DIV] ^ ctr.q[DIV]) & ctr.q[2+DIV]) | (ctr.q[1+DIV] & ctr.q[DIV])) ||
                 s != ((ctr.q[1+DIV] ^ ctr.q[DIV]) ^ ctr.q[2+DIV]))             // if the output from the circuit is wrong
            states.d = states.ERROR;                                            // goes to error state
        
        if (ctr.q == 0) {                    // overflow?
          states.d = states.MANUAL;          // automatic testing done with no error, switch back to manual mode
        }
      
      states.ERROR:
        seg.chars = {4h1, 4h2, 4h3, 4h4};    // display "FAIL" message, press reset to go back to manual mode
    }
  }
}
