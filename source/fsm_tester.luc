module fsm_tester (
    input clk,  // clock
    input rst,  // reset
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  const DIV = 26;           // regulates the speed which the test cases are iterated through
  const MAX_VALUE = c{8, DIVx{1}};
  
  .clk(clk) {
    .rst(rst) {
      fsm states = {MANUAL, AUTO};
      dff ctr[3+DIV]; // use a flip flop as a counter
    }
  }
  
  always {
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    case (states.q) {
      states.MANUAL:
        ctr.d = 1;
        
        // a = io_dip[0][1]; b = io_dip[0][0]; c = io_dip[0][2]
        io_led[0][0] = (io_dip[0][1] ^ io_dip[0][0]) ^ io_dip[0][2];                                   // Sum
        io_led[0][1] = ((io_dip[0][1] ^ io_dip[0][0]) & io_dip[0][2]) | (io_dip[0][1] & io_dip[0][0]); // Carry-out
        if (io_button[1])
          states.d = states.AUTO;
 
      states.AUTO:
        io_led[1][2-:3] = ctr.q[3+DIV-1-:3]; // set the LED output
        ctr.d = ctr.q + 1;                   // increment
        if (ctr.q == 0) {                    // overflow?
          states.d = states.MANUAL;          // reset
        }
    }
  }
}
